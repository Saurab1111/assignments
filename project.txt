#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
int win(int a[][3],char c,int,char[],char[]);
int player();
void display(int(*)[3]);
void set(int (*p)[3]);
int computer_turn(int(*)[],char,char,int);
int player_turn(int (*p)[3],int position,int);
int Computer(int game_type);
int tie(int(*)[]);
void computer_rule();
void player_rule();
void menu();
int main()
{
   menu();
   getch();
}
void set(int(*p)[3])
{
    int i,j,count=49;
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            p[i][j]=count;
            count++;
        }
    }
}
void menu()
   {
       system("COLOR E4");
       int game_type,x=1;
       printf("  1.Enter 1 to play with smart computer\n");
       printf("  2.Enter 2 to play with devil computer\n");
       printf("  3.Enter 3 to play with another player\n");
       printf("  4.Enter 4 to exit\n");
       printf("CHOICE:");
       scanf("%d",&game_type);
       switch(game_type)
      {
       case 1:
       case 2:
      while(x)
       {
         x=Computer(game_type); //game with computer
         if(x==0)
            menu();
         if(x==2)
            exit(0);
       }
      break;
       case 3:
        while(x)
        {
            x=player();  //game with player
            if(x==0)
                menu();
            if(x==2)
                exit(0);
        }
        break;
       case 4:
        exit(0);

      }
   }
int Computer(int game_type)
{
    char name[20],x='X',o='O';
    int position,d=1,a[3][3],T,D=1;
    fflush(stdin);
    printf("Enter Your Name:\n");
    gets(name);
    computer_rule();//Rules while playing with computer.
    set(a);
    display(a);
    while(d)
    {
        system("COLOR 0B");
        while(D)
        {
            printf("\n%s enter position no at which you want mark:",name);
            scanf("%d",&position);
            if(position==0)
                exit(0);
            D=player_turn(a,position,2);
            system("cls");
            if(D==1)
                display(a);
        }
        D=1;
        system("cls");
        player_turn(a,position,2); //pass 2 because in computer always place 'O' for player
        d=win(a,o,1,name,"Computer");
        if(d!=3)
          return d;
        T=tie(a);
        if(T!=3)
            return T;
        computer_turn(a,x,o,game_type);
        display(a);
        d=win(a,x,1,name,"Computer");
        if(d!=3)
            return d;
            T=tie(a);
        if(T!=3)
            return T;
    }
}
int player()
{
    char name[20],name1[20],x='X',o='O',turn=0;
    int position,d=1,a[3][3],T,D=1;
    fflush(stdin);
    printf("Enter player1  name:\n");
    gets(name);
    printf("Enter player2 name:\n");
    gets(name1);
    player_rule();
    set(a);
    display(a);
    while(d)
    {
        system("COLOR 0B");
        while(D)
        {
            if(turn%2==0)
            {
             printf("\n%s enter position no at which you want mark:",name);
             scanf("%d",&position);
             if(position==0)
                exit(0);
            }
            else
            {
             printf("\n%s enter position no at which you want mark:",name1);
             scanf("%d",&position);
             if(position==0)
                exit(0);
            }
            D=player_turn(a,position,turn);
            system("cls");
            if(D==1)
                display(a);
        }
        D=1;
        system("cls");
        if(turn%2==0)
        {
            d=win(a,o,3,name,name1);
        }
        else
        {
            d=win(a,x,3,name,name1);
        }
        if(d!=3)
            return d;
        T=tie(a);
        if(T!=3)
            return T;
        display(a);
        turn++;
    }
}
int player_turn(int (*p)[3],int position,int turn)
{
    int i,j,count=1;
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            if(count==position&&turn%2==0)
                {
                    if(p[i][j]>47&&p[i][j]<58) //to check whethet the position is marked or not.
                    {
                        p[i][j]=79;
                        return 0;
                    }
                    else
                        return 1;
                }
            else if(count==position&&turn%2!=0)
                {
                    if(p[i][j]>47&&p[i][j]<58) //to check whethet the position is marked or not.
                    {
                        p[i][j]='X';
                        return 0;
                    }
                    else
                        return 1;
                }
             count++;
        }
   }
}
int win(int a[][3],char c,int type,char name[],char name1[])
{

    int i,j,count,d=0;
    for(i=0;i<3;i++)
    {
        count=0;
        for(j=0;j<3;j++)
        {
            if(a[i][j]==c)
            {
                count++;
            }
        }
        if(count==3)
        {
            display(a);
            system("cls");
            if(type==1)
            {
                c=='X'?printf("%s won it!!\n",name1):printf("%s have won the game!!\n",name);
            }
            if(type==3)
            {
                c=='O'?printf("\n%s won the game!!",name):printf("\n%s won the game!!!",name1);
            }
            printf("Enter 1 to play with same setup or 0 to return to main menu or 2 to exit\n");
            scanf("%d",&d);
            if(d==1)
                return 1;
            else if(d==0)
                return 0;
                else
                return 2;
        }
    }
    for(j=0;j<3;j++)
    {
        count=0;
        for(i=0;i<3;i++)
        {
            if(a[i][j]==c)
            {
                count++;
            }
        }
        if(count==3)
        {
            display(a);
            system("cls");
            if(type==1)
            {
                c=='X'?printf("Computer won it!!\n"):printf("You have won the game!!\n");
            }
            if(type==3)
            {
                c=='O'?printf("\n%s won the game!!",name):printf("\n%s won the game!!!",name1);
            }
            printf("Enter 1 to play with same setup or 0 to return to main menu or 2 to exit\n");
            scanf("%d",&d);
            if(d==1)
                return 1;
            else if(d==0)
                return 0;
                else
                return 2;
        }
    }
    count=0;
    for(i=0;i<3;i++)
    {
        for(j=i;j<i+1;j++)
        {
            if(a[i][j]==c)
            {
                count++;
            }
        }
        if(count==3)
        {
            display(a);
            system("cls");
            if(type==1)
            {
                c=='X'?printf("Computer won it!!\n"):printf("You have won the game!!\n");
            }
            if(type==3)
            {
                c=='O'?printf("\n%s won the game!!",name):printf("\n%s won the game!!!",name1);
            }
            printf("Enter 1 to play with same setup or 0 to return to main menu or 2 to exit\n");
            scanf("%d",&d);
            if(d==1)
                return 1;
            else if(d==0)
                return 0;
                else
                return 2;
        }
     }
   if(a[0][2]==c&&a[1][1]==c&&a[2][0]==c)
   {

            display(a);
            system("cls");
            if(type==1)
            {
                c=='X'?printf("Computer won it!!\n"):printf("You have won the game!!\n");
            }
            if(type==3)
            {
                c=='O'?printf("\n%s won the game!!",name):printf("\n%s won the game!!!",name1);
            }
            printf("Enter 1 to play with same setup or 0 to return to main menu or 2 to exit\n");
            scanf("%d",&d);
            if(d==1)
                return 1;
            else if(d==0)
                return 0;
                else
                return 2;
   }
   return 3;
}
int computer_turn(int (*p)[3],char c,char d,int game_type)
{
  int i,j,m,n,*q[9],k=0,count,count1; //*q to remember winning places of player
  int xtime,place,correct=0; //place is empty position and xtime represent no of x in row/col/diagonal
  q[0]=NULL;  //safe code
  /*Computer trying to win and remembering the positions where user can win*/
  for(i=0;i<3;i++)
  {
          count=0;count1=0,correct=0; //correct to avoid previous m and y values
          for(j=0;j<3;j++)
          {
              if(p[i][j]==d)
                count++;
              else if(p[i][j]==c)
                count1++;
              else
          {
              m=i;n=j;
              correct=1;
          }
          }
          if(count1==2&&(p[m][n]>47&&p[m][n]<58)&&correct==1)  //checking winning situation for itself
          {
              p[m][n]=c;
              return 1;
          }
          else if(count==2&&(p[m][n]>47&&p[m][n]<58)&&correct==1)
          {
              q[k]=&p[m][n];//remembering the place where player can use
              k++;
              //printf("row\n");
          }
  }
  for(j=0;j<3;j++)
  {
      count=0;count1=0,correct=0;
       for(i=0;i<3;i++)
       {


              if(p[i][j]==d)
                {
                    count++;
                }
              else if(p[i][j]==c)
                count1++;
              else
          {
              m=i;n=j;
              correct=1;
          }
        }
          if(count1==2&&(p[m][n]>47&&p[m][n]<58)&&correct==1) //checking winning situation for itself
          {
              p[m][n]=c;
              return 1;
          }
          else if(count==2&&(p[m][n]>47&&p[m][n]<58)&&correct==1)
          {
              q[k]=&p[m][n];//remembering the place where player can use
              k++;
          }
    }

  count=0;count1=0;correct=0;
  for(i=0;i<3;i++)
  {
      for(j=i;j<i+1;j++)
      {
          if(p[i][j]==d)
                count++;
              else if(p[i][j]==c)
                count1++;
              else
          {
              m=i;n=j;
              correct=1;
          }
      }
  }
  if(count1==2&&(p[m][n]>47&&p[m][n]<58)&&correct==1) //checking winning situation for itself
          {
              p[m][n]=c;
              return 1;
          }
          else if(count==2&&(p[m][n]>47&&p[m][n]<58)&&correct==1)
          {
              q[k]=&p[m][n];//remembering the place where player can win
              k++;
          }
  count=0;count1=0;j=2;correct=0;
  for(i=0;i<3;i++)
  {
      if(p[i][j]==d)
        count++;
      else if(p[i][j]==c)
        count1++;
         else
          {
              m=i;n=j;
              correct=1;
          }
        j--;
  }
         if(count1==2&&(p[m][n]>47&&p[m][n]<58)&&correct==1) //checking winning situation for itself
          {
              p[m][n]=c;
              return 1;
          }
          else if(count==2&&(p[m][n]>47&&p[m][n]<58)&&correct==1)
          {
              q[k]=&p[m][n];//remembering the place where player can win
              k++;
          }

  if(game_type==1&&q[0]!=NULL) //smart computer placing value at empty position at which player win
  {
    *q[0]=c;
    return 1;
  }
  if(game_type==2&&q[0]!=NULL) //devil computer placing its mark at all winning situations
  {
      for(i=0;i<k;i++)
      {
          *q[i]=c;
      }
      return 1;
  }
  /*At this stage computer has no winning situation for itself
  and there is no position at which player is winning hence computer
  trying to place 'X' at a position at which it can win*/
  k=0; q[0]=NULL; //here *q is used to remember empty rows
  for(i=0;i<3;i++)
  {
      xtime=0;place=0;
      for(j=0;j<3;j++)
      {
          if(p[i][j]==c)
            xtime++;
          else if(p[i][j]>47&&p[i][j]<58)
            {
                place++;
                m=i;n=j;
            }
      }
      if(xtime==1&&place==2) //checking to place mark at appropriate position for increasing win situation for itself
      {
          p[m][n]=c;
          return 1;
      }
      else if(place=3) //remembering empty row but not assign as to check most appropriate place

      {
          q[k]=&p[m][n];
          k++;
      }
  }
  for(j=0;j<3;j++)
  {
      xtime=0;place=0;
      for(i=0;i<3;i++)
      {
          if(p[i][j]==c)
            xtime++;
          else if(p[i][j]>47&&p[i][j]<58)
            {
                place++;
                m=i;n=j;
            }
      }
      if(xtime==1&&place==2) //checking to place mark at appropriate position for increasing win situation for itself
      {
          p[m][n]=c;
          return 1;
      }
      else if(place==3) //remembering empty column but not assign as to check most appropriate place
      {
          q[k]=&p[m][n];
          k++;
      }
  }
    xtime=0;place=0;
    for(i=0;i<3;i++)
  {
      for(j=i;j<i+1;j++)
      {
          if(p[i][j]==c)
            xtime++;
          else if(p[i][j]>47&&p[i][j]<58)
            {
                place++;
                m=i;n=j;
            }
      }
      if(xtime==1&&place==2) //checking to place mark at appropriate position for increasing win situation for itself
      {
          p[m][n]=c;
          return 1;
      }
      else if(place==3) //remembering empty diagonal but not assign as to check most appropriate place

      {
          q[k]=&p[m][n];
          k++;
      }
  }
  xtime=0;place=0;j=2;
  for(i=0;i<3;i++)
  {
      if(p[i][j]==c)
        xtime++;
      else if(p[i][j]>47&&p[i][j]<58)
      {
          place++;
          m=i;n=j;
      }
      j--;
  }
  if(xtime==1&&place==2) //checking to place mark at appropriate position for increasing win situation for itself
      {
          p[m][n]=c;
          return 1;
      }
      else if(place==3) //no need to remember as its last check
      {
          p[m][n]=c;
          return 1;
      }
  if(q[0]!=NULL)
  {
      *q[0]=c;
      return 1;
  }
    /*After no codition matching*/
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            if(p[i][j]>47&&p[i][j]<58)
                {
                    p[i][j]=c;
                    return 1;
                }
        }
    }
}
void display(int (*p)[3])
{

    int i,j,count=49;
    for(i=0;i<3;i++)
    {
        printf("-------------\n");
        printf("| ");
        for(j=0;j<3;j++)
        {
            printf("%c | ",p[i][j]);
        }
        printf("\n");
    }
    printf("-------------\n");
    printf("\n");
}
void computer_rule()
{
  system("cls");
  printf("                   $$$$ SMART TIC TAC TOE $$$  \n");
  system("COLOR 04");
  printf("\n1.IF YOU MARK THE POSITION WHICH IS ALREADY MARKED YOU WILL GET ANOTHER CHANCE:\n");
  printf("\n2.COMPUTER IS NOT JUST STOPPING YOU TO WIN BUT CAN ALSO WIN IF GET SUCH CHANCE:\n");
  printf("\n3.YOU CAN WIN THE GAME IF YOU CAN ABLE TO PUT MARKS SIMULTANEOUSLY IN 3 HORIZONTAL/VERTICAL/DIAGONAL POSITIONS:\n");
  printf("\n4.IF BOTH OF YOU FAILED TO WIN THE MATCH IT WILL END AT TIE!!:\n");
  printf("\n4.YOU CAN EXIT GAME AT ANT TIME BY ENTERING 0 AS POSITION!!:\n");
  printf("\n5.SO TRY TO WIN IT IT AT MINIMUM CHANCE:\n");
  printf("Enter any key to start:\n");
  getch();
  system("cls");
}
int tie(int (*p)[3])
{
    int i,j,count=0,decision;
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            if(p[i][j]>47&&p[i][j]<58)
                count++;
        }
    }
    if(count>0)
        return 3;

    if(count==0)
    {
        printf("Match tied!!\n");
        printf("Enter 0 for main menu or 1 to play with same setup or 2 to exit\n");
        scanf("%d",&decision);
        return decision;
    }
}
void player_rule()
{
    system("cls");
    system("COLOR 04");
    printf("                   $$$$ SMART TIC TAC TOE $$$  \n");
    printf("\n1.IF ANY OF YOU MARK THE POSITION WHICH IS ALREADY MARKED HE/SHE WILL GET ANOTHER CHANCE:\n");
    printf("\n3.YOU CAN WIN THE GAME IF YOU CAN ABLE TO PUT MARKS SIMULTANEOUSLY IN 3 HORIZONTAL/VERTICAL/DIAGONAL POSITIONS:\n");
    printf("\n4.IF BOTH OF YOU FAILED TO WIN THE MATCH IT WILL END AT TIE!!:\n");
    printf("\n4.YOU CAN EXIT GAME AT ANT TIME BY ENTERING 0 AS POSITION!!:\n");
    printf("\n5.SO TRY TO WIN IT IT AT MINIMUM CHANCE:\n");
    printf("\nEnter any key to start:\n");
    getch();
    system("cls");
}
